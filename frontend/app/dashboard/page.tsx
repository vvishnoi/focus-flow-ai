'use client'

import { useEffect, useState } from 'react'
import Link from 'next/link'
import styles from './dashboard.module.css'
import { getReports, getUserId, type Report } from '@/lib/api'
import { getProfiles, getActiveProfileSync, clearActiveProfile, type Profile } from '@/lib/profiles'
import ProfileModal from '@/components/ProfileModal'
import ConfirmDialog from '@/components/ConfirmDialog'

export default function Dashboard() {
  const [reports, setReports] = useState<Report[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [profiles, setProfiles] = useState<Profile[]>([])
  const [activeProfile, setActiveProfile] = useState<Profile | null>(null)
  const [showProfileModal, setShowProfileModal] = useState(false)
  const [showClearConfirm, setShowClearConfirm] = useState(false)

  useEffect(() => {
    async function loadData() {
      // Load profiles
      const profilesList = await getProfiles()
      setProfiles(profilesList)
      
      const active = getActiveProfileSync()
      setActiveProfile(active)

      try {
        const userId = getUserId()
        console.log('Fetching reports for user:', userId)
        
        const response = await getReports(userId)
        setReports(response.reports)
        setLoading(false)
      } catch (err) {
        console.error('Error fetching reports:', err)
        setError('Failed to load reports')
        setLoading(false)
      }
    }

    loadData()
  }, [])

  const handleProfileSelected = (profile: Profile) => {
    setActiveProfile(profile)
  }

  const handleClearProfile = () => {
    setShowClearConfirm(true)
  }

  const handleConfirmClear = () => {
    clearActiveProfile()
    setActiveProfile(null)
    setShowClearConfirm(false)
  }

  return (
    <main className={styles.main}>
      <div className={styles.container}>
        <h1 className={styles.title}>Progress Dashboard</h1>
        <p className={styles.subtitle}>AI-powered insights and reports</p>

        {activeProfile && (
          <div className={styles.profileBanner}>
            <div>
              <span className={styles.profileLabel}>Viewing reports for:</span>
              <span className={styles.profileName}>{activeProfile.name}</span>
              <span className={styles.profileAge}>Age {activeProfile.age}</span>
            </div>
            <div className={styles.profileActions}>
              <button 
                className={styles.changeProfileButton}
                onClick={() => setShowProfileModal(true)}
              >
                Change Profile
              </button>
              <button 
                className={styles.clearProfileButton}
                onClick={handleClearProfile}
                title="Clear profile and logout"
              >
                Clear Profile
              </button>
            </div>
          </div>
        )}
        
        {loading && (
          <div className={styles.placeholder}>
            <p>Loading your reports...</p>
          </div>
        )}

        {error && (
          <div className={styles.placeholder}>
            <p style={{ color: '#ff6b6b' }}>{error}</p>
          </div>
        )}

        {!loading && !error && reports.length === 0 && (
          <div className={styles.placeholder}>
            <p>No reports yet!</p>
            <p>Complete a game session to see your AI-generated progress report here.</p>
            <p style={{ fontSize: '0.875rem', color: '#aaa', marginTop: '1rem' }}>
              Reports are generated automatically after each session and will appear here within 30 seconds.
            </p>
          </div>
        )}

        {!loading && !error && reports.length > 0 && (
          <div className={styles.reportsContainer}>
            <p style={{ marginBottom: '1.5rem', color: '#aaa' }}>
              Found {reports.length} report{reports.length !== 1 ? 's' : ''}
            </p>
            
            {reports.map((report) => (
              <div key={report.sessionId} className={styles.reportCard}>
                <div className={styles.reportHeader}>
                  <h3>Session Report</h3>
                  <span className={styles.reportDate}>
                    {new Date(report.timestamp).toLocaleString()}
                  </span>
                </div>
                <div className={styles.reportContent}>
                  <pre style={{ whiteSpace: 'pre-wrap', fontFamily: 'inherit' }}>
                    {report.report}
                  </pre>
                </div>
                <div className={styles.reportFooter}>
                  <span>Generated by {report.modelUsed}</span>
                  <span>Session ID: {report.sessionId}</span>
                </div>
              </div>
            ))}
          </div>
        )}

        <Link href="/" className={styles.backButton}>
          Back to Home
        </Link>
      </div>

      {!activeProfile && (
        <div className={styles.noProfileBanner}>
          <p>No profile selected. Select a profile to view their reports.</p>
          <button 
            className={styles.selectProfileButton}
            onClick={() => setShowProfileModal(true)}
          >
            Select Profile
          </button>
        </div>
      )}

      <ProfileModal 
        isOpen={showProfileModal}
        onClose={() => setShowProfileModal(false)}
        onProfileSelected={handleProfileSelected}
      />

      <ConfirmDialog
        isOpen={showClearConfirm}
        title="Clear Profile?"
        message="This will log out the current patient. You can continue without a profile or select a new one."
        confirmText="Clear Profile"
        cancelText="Cancel"
        onConfirm={handleConfirmClear}
        onCancel={() => setShowClearConfirm(false)}
        danger={true}
      />
    </main>
  )
}
